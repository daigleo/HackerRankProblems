def commonChild(s1, s2):
    '''
    Given two strings, s1 and s2, where |s1| = |s2| and 1 <= |s1|, |s2|, <= 5000,
    find the longest common subsequence between s1 and s2.

    A common subsequence is an sequence of character that occurs and both strings
    and that can be separated by other non-common characters.

    output:
    The length of the longest common subsequence

    examples:
    X       Y       LCS
    ABC     ABCD    3 -> ABC
    ABC     ACBC    3 -> ABC
    ABCD    ABDC    3 -> ABC
    CBABC   ABCCB   3 -> ABC

    interesting write up on wikipedia:
    https://en.wikipedia.org/wiki/Longest_common_subsequence_problem

    There are three scenarios to consider:
                    {Null,                                  if i=0 or j=0
    LCS(X_i, Y_j) = {LCS(X_i-1, Y_j-1)^x_i,                 if i, j > 0 and x_i = y_j
                    {max[LCS(X_i-1, Y_j), LCS(X_i, Y_j-1)], if i, j > 0, x_i /= y_j
    Note that when i=0 -> X_0 = (), hence why LCS(X_0, ...) = Null
    '''
    n = len(s1)
    m = len(s2)
    prev_tracker = m * [0]

    for i in range(n):
        curr_tracker = m * [0]
        for j in range(m):
            if s1[i] == s2[j]:
                if j > 0:
                    curr_tracker[j] = prev_tracker[j-1] + 1
                else:
                    curr_tracker[j] += 1
            else: # using max() instead of second condition in the or times out on Hacker Rank
                if j == 0 or prev_tracker[j] > curr_tracker[j-1]:
                    curr_tracker[j] = prev_tracker[j]
                else:
                    curr_tracker[j] = curr_tracker[j-1]
        prev_tracker = curr_tracker
    return curr_tracker[-1]


def pretty_print(x, s1, s2):
    print(' ', end=' ')
    print(list(s2))
    for i, y in enumerate(x):
        print(s1[i], end=' ')
        print(list(map(str, y)))
    print('\n')


if __name__ == '__main__':

    a1 = 'LZNGFTIHZHJSQGQQYICYKYAPAFJMYXIRFHFISJZJAVHMQLPBFXSPEEQAUJIIVSVLCRVHSMIGXQIVOOAFHIQOAOJBOTGJUPXEPQZFJSNLVDHCXMDRPPGTUNBIMARYQXUTMQVGOVZDYSCBCHRTTAYEIFFNAGFDFGEFJNAXKWUYNFPETFYTHRLEICJEFDFHJFADZFBRABLMDYNGIBXHGWDOWIFLWUKFVFUIITQGFRCGUYFZINJYIGXCKNPVDPMUKTVOIBSIUUDQDWXTJAIGVSFROIGSEOWNZAWDRIZFLFQAYQKETDOYLUOHSVUYOJLDCJNIWDOFBRLWXQSCCTDEQHGHUXCHTCFSZRTRESSXNVOXFAHSWUAVJXMHCKRCOYVENGGBSXXYPEPUAQFNNCRVFQQDFCBPNTTNISDVORWBJBBCVVNLYUTTSBPRXSKYFEKOMIZCGNSQHZYVCHHILQLGCLIKTNCLQUOUAXFNHJPIZYBYWSVMGUVAGXANTEZHSDUDBVVCAGCPKJAQXIOQOCTNNOOFUYZEGGPAEQGRRDREZUSVTKCQAZQDZAEIIGOCJPMQXRHRFQTCBNEMSAPSSLHXJVDBCSGQVUPGNCZKTFEBRIKWKSYXWRAHGNGYLLXFKJOUNXKDRWMBVOZGEOBAYYNFDNHHWFVPOKWUFLZTZUCMLGFVUWFXSVYYUBGRHAUWHBQSNIHENTXADZCCZZZPOPESVYCROMUBJPDGBGUHBSMUQSYGEHUCRDACDYJIPYBLPXQUOLSELHBBBYQHKIOVFMSXANOMKMOXNPTGZSVHMCAEFSCNMCPHFUHOMNRNEQBOSLMAHJAMSMQMGKTLVKBVTSUDDWKXHHIIAFVNMQIHVVEPACCEVVECWOBVZVTWWMDIKYZAGZJOLQCINZZVZFNJGTCXXVLRAGJQFDMYMNKQDWNCLRTPYCCXEQFGKQWQSSYXNGELLNMAKNPIKFNKUIDCRUTWSTRKIHUAOGMPXOBQTFFAQMKG'
    a2 = 'BLCRCQQMXZCBACBDSFGIQDKFFHGPOGSZLHLXNZSSXRGVKIGNABASNFZDHVJOAINPZEZNDWOWSEJGMOVPPXHBERDJXLJSPAQDKNQEJMTBMVTPRXOCHYPKMDGRIHUPBQWZBNIXJBPTFYRMIUNXLVKPIRLLGJVGBIBIGDRIWGKEIKKYGCCFHCTEVNJPWFCFPDOXQDYGHRRNXTFQRGCTITBUEPHPEIXQMYSKLYQXZWVRWDBYLJRBOWRAHRWUJWZKEGBCEHVTKJERFIJVWWVSRVNIDHYVEYIWAPHYSIKCBDBDWXAWXEHRFMHCQNHTBYOFYJBIKJGUDIMQKNFCKMWNGVROISVLPZZCRUKHBWPSHRBSERBQOJXFTKSDDCRBIACQMHIOQBNESXTNURRXONVMNGZBMBDZDBWGXMFNCJWVUICKVQHUDDMVHNHRAHRDHOITKDDRRMFSQFZSLAASQSKJTVWTOSWQSPEARPEWADMMNSPCZTMKGVQOBGOBMGICUZNBEBZBFDRPFJPLCJOUTZBNJAKTTMQPQVQOGVHIBNWFXOQWSMUSCBBCZURZOYRHSTKIFUXWROLBQBLYEDXQHKXYZNWVDCRAABKUBAPCPLKPZRQWNSWRCLNGDYLICBQAPPFNIDNCRMZEJJNNSUDDMAAOJPDQZPBRYKMVACVMTNNPQZBWHYALBHLDAYTJGJOWXQYVQQVNHLJXVVEXIPHEZZCKLKXNKLAYSHPSWWBPOQXZJYNFWBYVMMTMKFWJVPGHTGXCMBKTBWIXQJAMGVNRALOCACXIICCVEWKKSFDBMPRJUEYCHROEDXTKYJYSGVITYMVSAAEVKDAEDXWDBSHFTXDCDRTLCCFAKWSBNTPUSXIGTSXOVPIMVURDXOGBOOQAHISZBKADCRXVSJSICXWQNMQGCCPTHWHKFKDXUGARNLREDXZIROXZTXPAVOGORNCVXGAMFVJUKLGPHSZKVVMRMFXLYUZNDUYOIIHJCKDWQXNCIYNG'

    tests = [('HARRY', 'SALLY'), 
             ('AA', 'BB'), 
             ('SHINCHAN', 'NOHARAAA'), 
             ('ABCDEF', 'FBDAMN'),
             ('AAAAA', 'AAAAA'),
             (a1, a2)
    ]

    answers = [2, 0, 3, 2, 5, 321]

    for (t1, t2), answer in zip(tests, answers):
        max_length = commonChild(t1, t2)
        test_result = ['FAIL', 'PASS'][max_length == answer]
        print(f'({t1[:10]}, {t2[:10]}): {test_result} (result: {max_length}, expected: {answer})')

    
    
